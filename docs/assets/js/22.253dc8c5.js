(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{200:function(a,t,e){"use strict";e.r(t);var r=e(0),i=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"diff算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#diff算法","aria-hidden":"true"}},[a._v("#")]),a._v(" diff算法")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/5518628-89bb3cd6ebdb4296.png",alt:"blockchain",title:"区块链"}})]),a._v(" "),e("h2",{attrs:{id:"diff算法的作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#diff算法的作用","aria-hidden":"true"}},[a._v("#")]),a._v(" diff算法的作用")]),a._v(" "),e("p",[a._v("计算出Virtual DOM中真正变化的部分，并只针对该部分进行原生DOM操作，而非重新渲染整个页面。")]),a._v(" "),e("h2",{attrs:{id:"传统diff算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#传统diff算法","aria-hidden":"true"}},[a._v("#")]),a._v(" 传统diff算法")]),a._v(" "),e("p",[a._v("通过循环递归对节点进行依次对比，算法复杂度达到 O(n^3) ，n是树的节点数，这个有多可怕呢？——如果要展示1000个节点，得执行上亿次比较。。即便是CPU快能执行30亿条命令，也很难在一秒内计算出差异。")]),a._v(" "),e("h2",{attrs:{id:""}},[e("a",{staticClass:"header-anchor",attrs:{href:"#","aria-hidden":"true"}},[a._v("#")]),a._v(" "),e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/5518628-d60043dbeddfce8b.png",alt:"blockchain",title:"区块链"}})]),a._v(" "),e("h3",{attrs:{id:"大致理解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#大致理解","aria-hidden":"true"}},[a._v("#")]),a._v(" 大致理解")]),a._v(" "),e("pre",[e("code",[a._v("在两个不同的dom树中只能对两个dom树的同级进行比较\n如果说子元素的父元素不相同左边的整个节点都会被右边最新的节点换掉\n")])]),a._v(" "),e("h1",{attrs:{id:"react"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react","aria-hidden":"true"}},[a._v("#")]),a._v(" react")]),a._v(" "),e("h2",{attrs:{id:"react的diff算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react的diff算法","aria-hidden":"true"}},[a._v("#")]),a._v(" React的diff算法")]),a._v(" "),e("h3",{attrs:{id:"（1）什么是调和？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#（1）什么是调和？","aria-hidden":"true"}},[a._v("#")]),a._v(" （1）什么是调和？")]),a._v(" "),e("p",[a._v("将Virtual DOM树转换成actual DOM树的最少操作的过程 称为 调和 。")]),a._v(" "),e("h3",{attrs:{id:"（2）什么是react-diff算法？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#（2）什么是react-diff算法？","aria-hidden":"true"}},[a._v("#")]),a._v(" （2）什么是React diff算法？")]),a._v(" "),e("p",[a._v("diff算法是调和的具体实现。\ndiff策略\nReact用 三大策略 将O(n^3)复杂度 转化为 O(n)复杂度")]),a._v(" "),e("h3",{attrs:{id:"策略一（tree-diff）："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#策略一（tree-diff）：","aria-hidden":"true"}},[a._v("#")]),a._v(" 策略一（tree diff）：")]),a._v(" "),e("p",[a._v("Web UI中DOM节点跨层级的移动操作特别少，可以忽略不计。\n策略二（component diff）：\n拥有相同类的两个组件 生成相似的树形结构，\n拥有不同类的两个组件 生成不同的树形结构。")]),a._v(" "),e("h3",{attrs:{id:"策略三（element-diff）："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#策略三（element-diff）：","aria-hidden":"true"}},[a._v("#")]),a._v(" 策略三（element diff）：")]),a._v(" "),e("p",[a._v("对于同一层级的一组子节点，通过唯一id区分。")])])}],!1,null,null,null);t.default=i.exports}}]);